{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { decrementCount, incrementCount, resetCount } from \"../actions/example-actions\";\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"increment\", function () {\n      var dispatch = _this.props.dispatch;\n      dispatch(incrementCount());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"decrement\", function () {\n      var dispatch = _this.props.dispatch;\n      dispatch(decrementCount());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"reset\", function () {\n      var dispatch = _this.props.dispatch;\n      dispatch(resetCount());\n    });\n\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      var count = this.props.count;\n      return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"Count: \", React.createElement(\"span\", null, count)), React.createElement(\"button\", {\n        onClick: this.increment\n      }, \"+1\"), React.createElement(\"button\", {\n        onClick: this.decrement\n      }, \"-1\"), React.createElement(\"button\", {\n        onClick: this.reset\n      }, \"Reset\"));\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nfunction mapStateToProps(state) {\n  var count = state.example.count;\n  return {\n    count: count\n  };\n}\n\nexport default connect(mapStateToProps)(Counter);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport { initializeStore } from '../store';\nvar isServer = typeof window === 'undefined';\nvar __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nexport default (function (App) {\n  return (\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(AppWithRedux, _React$Component);\n\n      _createClass(AppWithRedux, null, [{\n        key: \"getInitialProps\",\n        value: function () {\n          var _getInitialProps = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(appContext) {\n            var reduxStore, appProps;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    // Get or Create the store with `undefined` as initialState\n                    // This allows you to set a custom default initialState\n                    reduxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages\n\n                    appContext.ctx.reduxStore = reduxStore;\n                    appProps = {};\n\n                    if (!(typeof App.getInitialProps === 'function')) {\n                      _context.next = 7;\n                      break;\n                    }\n\n                    _context.next = 6;\n                    return App.getInitialProps(appContext);\n\n                  case 6:\n                    appProps = _context.sent;\n\n                  case 7:\n                    return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                      initialReduxState: reduxStore.getState()\n                    }));\n\n                  case 8:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function getInitialProps(_x) {\n            return _getInitialProps.apply(this, arguments);\n          }\n\n          return getInitialProps;\n        }()\n      }]);\n\n      function AppWithRedux(props) {\n        var _this;\n\n        _classCallCheck(this, AppWithRedux);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(AppWithRedux).call(this, props));\n        _this.reduxStore = getOrCreateStore(props.initialReduxState);\n        return _this;\n      }\n\n      _createClass(AppWithRedux, [{\n        key: \"render\",\n        value: function render() {\n          return React.createElement(App, _extends({}, this.props, {\n            reduxStore: this.reduxStore\n          }));\n        }\n      }]);\n\n      return AppWithRedux;\n    }(React.Component)\n  );\n});","map":null,"metadata":{},"sourceType":"module"}